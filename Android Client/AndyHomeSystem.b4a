Build1=Default,andy.home.system
File1=0.png
File2=1.bal
File3=off.png
File4=on.png
File5=Settings.bal
FileGroup1=Default Group
FileGroup2=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
Group=Default Group
IconFile=
Library1=core
Library10=phone
Library11=mlwifi
Library12=viewsex
Library13=httputils2
Library14=wificonnect
Library2=appcompat
Library3=javaobject
Library4=xmllayoutbuilder
Library5=jmqtt
Library6=http
Library7=byteconverter
Library8=xui
Library9=stringutils
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: http://www.basic4ppc.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="7" android:targetSdkVersion="26"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~'End of default text.~\n~~\n~SetApplicationAttribute(android:theme, "@style/MyAppTheme")~\n~~\n~CreateResource(values, theme.xml,~\n~<resources>~\n~    <style name="MyAppTheme" parent="Theme.AppCompat.Light.NoActionBar">~\n~        <item name="colorPrimary">#0098FF</item>~\n~        <item name="colorPrimaryDark">#007CF5</item>~\n~        <item name="colorAccent">#66CD00</item>~\n~        <item name="windowNoTitle">true</item>~\n~        <item name="windowActionBar">false</item>~\n~    </style>~\n~</resources>~\n~)
Module1=CustomListView
Module2=Settings
Module3=Starter
NumberOfFiles=5
NumberOfLibraries=14
NumberOfModules=3
Version=8
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: Andy Greenhouse
	#VersionCode: 1
	#VersionName: 1.0
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
	#BridgeLogger:True
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region
	#Extends: android.support.v7.app.AppCompatActivity
Sub Process_Globals
	Private MQTT As MqttClient
    Private MQTTUser As String = "dbgdbcqw"
    Private MQTTPassword As String = "Nc3F4APoO801"
    Private MQTTServerURI As String = "tcp://m14.cloudmqtt.com:15093"
    Private BC As ByteConverter
	Private cartBitmap As Bitmap
	Private badge As Int 'ignore
End Sub

Sub Globals
	Private ACToolBarLight1 As ACToolBarLight
	Private ToolbarHelper As ACActionBar
	Private btnRefresh As ACButton
	Private tglRelaySwitch As ACSwitch
	Private btnRestart As ACButton
	Private clv1 As CustomListView
	Private gblACMenu As ACMenu
End Sub

Sub Activity_Create(FirstTime As Boolean)
	Try
		If FirstTime Then
	        'CallSub(Me, MQTT_Connect)
			MQTT_Connect
	    End If
		Activity.LoadLayout("1")
		Dim bd As BitmapDrawable
		bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
		ACToolBarLight1.NavigationIconDrawable = bd
		ToolbarHelper.Initialize
		Dim cs As CSBuilder
		ToolbarHelper.Title= cs.Initialize.Size(20).Append("Andy Greenhouse System").PopAll
		ToolbarHelper.subTitle = ""
		ToolbarHelper.ShowUpIndicator = False 'set to true to show the up arrow
		ACToolBarLight1.InitMenuListener
		Dim jo As JavaObject = ACToolBarLight1
		Dim xl As XmlLayoutBuilder
		jo.RunMethod("setPopupTheme", Array(xl.GetResourceId("style", "ToolbarMenu")))		
	Catch
		ToastMessageShow(LastException,False)
	End Try
End Sub

Sub Activity_Resume
	Try
		If MQTT.IsInitialized = False Or MQTT.Connected = False Then
			MQTT_Connect
		End If
	Catch
		Log(LastException)
	End Try
End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub

'Connect to CloudMQTT broker
Sub MQTT_Connect
	Try
		Dim ClientId As String = Rnd(0, 999999999) 'create a unique id
        MQTT.Initialize("MQTT", MQTTServerURI, ClientId)

        Dim ConnOpt As MqttConnectOptions
        ConnOpt.Initialize(MQTTUser, MQTTPassword)
        MQTT.Connect2(ConnOpt)
	Catch
		AddEvent("MQTT_Connect: " & LastException)
	End Try
End Sub

Sub MQTT_Connected (Success As Boolean)
	Try	
		If Success = False Then
	        Log(LastException)
			AddEvent("MQTT error connecting")
	    Else
			AddEvent("Connected to MQTT broker")
	        MQTT.Subscribe("Andy", 0)
			btnRefresh_Click
	    End If
	Catch
		AddEvent("MQTT_Connected: " & LastException)
	End Try
    
End Sub

Private Sub MQTT_Disconnected
	Try
		gblACMenu.Clear
		gblACMenu.Add(0, 0, "Settings",Null)
		gblACMenu.Add(1, 1, "About",Null)
		AddEvent("Disconnected from MQTT broker")
	Catch
		Log(LastException)
	End Try
End Sub

Private Sub MQTT_MessageArrived (Topic As String, Payload() As Byte)
	Try
		Dim status As String 
		status = BytesToString(Payload, 0, Payload.Length, "UTF8")
		If status="*Relay has been opened" Or status = "*Relay is open" Then
			ShowRelayIcon("on.png")
		else if status = "*Relay has been closed" Or status = "*Relay is closed" Then
			ShowRelayIcon("off.png")
		End If
		AddEvent(status)
	Catch
		AddEvent("MQTT_MessageArrived: " & LastException)
	End Try
End Sub

Sub AddEvent(text As String)
	Try
		DateTime.DateFormat = "MMM d h:mm:ss a"
		clv1.AddTextItem(DateTime.Date(DateTime.Now) & ": " & text, text)
		Sleep(100)
		clv1.ScrollToItem(clv1.Size-1)
	Catch
		Log(LastException)
	End Try
End Sub

Sub tglRelaySwitch_CheckedChange(Checked As Boolean)
	Try
		If MQTT.IsInitialized = False Or MQTT.Connected = False Then
			MQTT_Connect
		End If
		
		If Checked Then
			MQTT.Publish("Andy", BC.StringToBytes("Remotely open relay", "utf8"))
		Else
			MQTT.Publish("Andy", BC.StringToBytes("Remotely close relay", "utf8"))
		End If
		btnRefresh_Click
	Catch
		AddEvent("tglRelaySwitch_CheckedChange: " & LastException)
	End Try
End Sub

Sub btnRefresh_Click
	Try	
		If MQTT.IsInitialized = False Or MQTT.Connected = False Then
			MQTT_Connect
		End If
		MQTT.Publish("Andy", BC.StringToBytes("Check relay status", "utf8"))		
	Catch
		AddEvent("btnRefresh_Click: " & LastException)
	End Try

End Sub

Sub btnRestart_Click
	Try	
		Dim result As Int
		Dim bd As BitmapDrawable
		bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
		result = Msgbox2("Restart the controller?", "Andy Greenhouse System", "Yes", "", "No", bd.Bitmap)
		If result = DialogResponse.POSITIVE Then
			If MQTT.IsInitialized = False Or MQTT.Connected = False Then
			MQTT_Connect
			End If
			MQTT.Publish("Andy", BC.StringToBytes("Restart controller", "utf8"))
		End If	
	Catch
		AddEvent("btnRestart_Click: " & LastException)
	End Try

End Sub

Sub ACToolBarLight1_MenuItemClick (Item As ACMenuItem)
	Try
		If Item.Title = "About" Then
			ShowAboutMenu
		else if Item.Title = "Settings" Then
			StartActivity("Settings")
		End If
	Catch
		Log(LastException)
	End Try
End Sub

Sub ShowAboutMenu
	Try
		Dim bd As BitmapDrawable
		bd.Initialize(LoadBitmapResize(File.DirAssets, "0.png", 32dip, 32dip, True))
		Msgbox2("Andy Greenhouse System v" & GetVersionCode & CRLF & CRLF & "Developed by Cloyd Catanaoan" & CRLF & "March 13, 2018", "About", "OK", "", "", bd.Bitmap)
	Catch
		Log(LastException)
	End Try
	
End Sub

Sub GetVersionCode() As String
	Dim AppVersion As String
	Try
		Dim pm As PackageManager
	    Dim packageName As String
	    packageName =  Application.PackageName
	    AppVersion = pm.GetVersionName(packageName)
	Catch
		Log(LastException)
	End Try
	Return AppVersion
End Sub

Sub Activity_Createmenu(Menu As ACMenu)
	Try
		Menu.Clear
		gblACMenu = Menu
		Menu.Add(0, 0, "Settings",Null)
		Menu.Add(1, 1, "About",Null)
	Catch
		Log(LastException)
	End Try
End Sub

Sub ShowRelayIcon(state As String)
	Try
		gblACMenu.Clear
		Dim item As ACMenuItem = ACToolBarLight1.Menu.Add2(0, 0, "relay", Null)
		item.ShowAsAction = item.SHOW_AS_ACTION_ALWAYS
		cartBitmap = LoadBitmap(File.DirAssets, state)
		UpdateIcon("relay", AddBadgeToIcon(cartBitmap, badge))
		gblACMenu.Add(0, 0, "Settings",Null)
		gblACMenu.Add(1, 1, "About",Null)
	Catch
		Log(LastException)
	End Try
End Sub

Sub UpdateIcon(MenuTitle As String, Icon As Bitmap)
	Try
		Dim m As ACMenuItem = GetMenuItem(MenuTitle)
		m.Icon = BitmapToBitmapDrawable(Icon)
	Catch
		Log(LastException)
	End Try
End Sub

Sub BitmapToBitmapDrawable (bitmap As Bitmap) As BitmapDrawable
	Try
		Dim bd As BitmapDrawable
		bd.Initialize(bitmap)
		Return bd
	Catch
		Log(LastException)
		Return Null
	End Try
End Sub

Sub GetMenuItem(Title As String) As ACMenuItem
	Try
		For i = 0 To ACToolBarLight1.Menu.Size - 1
			Dim m As ACMenuItem = ACToolBarLight1.Menu.GetItem(i)
			If m.Title = Title Then
				Return m
			End If
		Next
		Return Null
	Catch
		Log(LastException)
		Return Null
	End Try
	
End Sub

Sub AddBadgeToIcon(bmp As Bitmap, Number As Int) As Bitmap
	Dim mbmp As Bitmap
	Try
		Dim cvs As Canvas
		mbmp.InitializeMutable(32dip, 32dip)
		cvs.Initialize2(mbmp)
		Dim target As Rect
		target.Initialize(0, 0, mbmp.Width, mbmp.Height)
		cvs.DrawBitmap(bmp, Null, target)
		If Number > 0 Then
			cvs.DrawCircle(mbmp.Width - 8dip, 8dip, 8dip, Colors.Red, True, 0)
			cvs.DrawText(Min(Number, 9), mbmp.Width - 8dip, 12dip, Typeface.DEFAULT_BOLD, 12, Colors.White, "CENTER")
		End If
		Return mbmp
	Catch
		Log(LastException)
		Return Null
	End Try
End Sub

#If Java

public boolean _onCreateOptionsMenu(android.view.Menu menu) {
    if (processBA.subExists("activity_createmenu")) {
        processBA.raiseEvent2(null, true, "activity_createmenu", false, new de.amberhome.objects.appcompat.ACMenuWrapper(menu));
        return true;
    }
    else
        return false;
}
#End If