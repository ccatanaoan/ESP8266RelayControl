Version=2.2
NumberOfModules=2
Module1=GlobalStore
Module2=WiFiServer
Build1=Default,B4RDev
NumberOfFiles=0
NumberOfLibraries=6
Library1=rcore
Library2=resp8266
Library3=resp8266wifi
Library4=rmqtt
Library5=reeprom
Library6=rrandomaccessfile
@EndOfDesignText@

#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 600
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'Public variables can be accessed from all modules.
	Public Serial1 As Serial
	Private d1pins As D1Pins
	Private pin16 As Pin
	Private d6 As Pin
	Public WiFi As ESP8266WiFi
	Private WiFiStr As WiFiSocket
	Private MQTT As MqttClient
	Private MQTTOpt As MqttConnectOptions
	Private MQTTUser As String = "dbgdbcqw"
	Private MQTTPassword As String = "Nc3F4APoO801"
	Private MQTTHostName As String = "m14.cloudmqtt.com"
	Private MQTTPort As Int = 15093
	Private StopRelay As Boolean = False
	Public ESP As ESP8266
	Private WiFiSSID As String = "CloydNote8"
	Private WiFiPassword As String = "adjj6347"
	Private RelayOpenDelay As String = "5000"
	Private RelayClosedDelay As String = "15000"
	Private eeprom As EEPROM
	Private bc As ByteConverter
	Private const MAGIC_EEPROM As Byte = 123
End Sub

Private Sub AppStart
	Serial1.Initialize(115200)
	Delay(3000)
	Log("AppStart")
	' Pin 2 is the blue LED
	' Pin 16 is the red LED
	' D6 = pin 12 is the logic/signal pin. Use 3.3v pin of Node MCU.
	
	pin16.Initialize(16, pin16.MODE_OUTPUT)
	d6.Initialize(d1pins.D6, d6.MODE_OUTPUT)
	pin16.DigitalWrite(True)
	
	'WriteToEEPROM("SSID","Password","55555","6666","True")
	WiFiServer.Start
	ReadFromEEPROM

	' Infinite relay toggle
	RelayOpen(0)
End Sub

Sub MQTT_Connect(Unused As Byte)
	If WiFi.IsConnected = False Then
		ConnectToWifi
	End If
	If MQTT.Connect = False Then
		pin16.DigitalWrite(True)
		Log("Connecting to broker")
		MQTT.Connect2(MQTTOpt)
		CallSubPlus("MQTT_Connect", 1000, 0)
	Else
		pin16.DigitalWrite(False)
		Log("Connected to broker")
		MQTT.Subscribe("Andy", 0)
	End If
End Sub

Private Sub RelayClose (tag As Byte)
	If WiFi.IsConnected = False Then
		ConnectToWifi
	End If
	If StopRelay Then
		Return
	End If
	Log("*Relay has been closed")
	MQTT.Publish("Andy","*Relay has been closed")
	d6.DigitalWrite(True)
	Dim closedDelay As String = bc.StringFromBytes(GlobalStore.Slot3)
	If closedDelay.Length = 0 Then
		closedDelay = RelayClosedDelay
		GlobalStore.Put(3,RelayClosedDelay)
	End If
	Log("closedDelay: ",closedDelay)
	CallSubPlus("RelayOpen", closedDelay, 0)
End Sub

Private Sub RelayOpen (tag As Byte)
	If WiFi.IsConnected = False Then
		ConnectToWifi
	End If
	If StopRelay Then
		Return
	End If
	Log("*Relay has been opened")
	MQTT.Publish("Andy","*Relay has been opened")
	d6.DigitalWrite(False)
	Dim openDelay As String = bc.StringFromBytes(GlobalStore.Slot2)
	If openDelay.Length = 0  Then
		openDelay = RelayOpenDelay
		GlobalStore.Put(2,RelayOpenDelay)
	End If
	Log("openDelay: ",openDelay)
	CallSubPlus("RelayClose", openDelay, 0)
End Sub

Sub mqtt_MessageArrived (Topic As String, Payload() As Byte)
	pin16.DigitalWrite(False)
	Log("Message arrived. Topic=", Topic, " Payload=", Payload)
	If Payload="Remotely close relay" Then
		MQTT.Publish("Andy","*Closing relay by remote")
		d6.DigitalWrite(True)
		StopRelay = True
	Else If Payload="Remotely open relay" Then
		MQTT.Publish("Andy","*Opening relay by remote")
		StopRelay = False
		RelayOpen(0)
	Else If Payload = "Restart controller" Then
		MQTT.Publish("Andy","*Restarting relay by remote")
		ESP.Restart
	Else If Payload = "Check relay status" Then
		If StopRelay Then
			MQTT.Publish("Andy","*Relay is permanently closed")
		else If d6.DigitalRead Then
			MQTT.Publish("Andy","*Relay is closed")
		Else
			MQTT.Publish("Andy","*Relay is open")
		End If
	End If
End Sub

Sub mqtt_Disconnected
	Log("Disconnected from broker")
	WiFiServer.Start
	pin16.DigitalWrite(True)
	MQTT.Close
	MQTT_Connect(0)
End Sub

Sub ConnectToWifi
		Dim SSID As String
		Dim password As String
		
		SSID = bc.StringFromBytes(GlobalStore.Slot0)
		If SSID.Length = 0 Then 
			SSID = WiFiSSID
			GlobalStore.Put(0,SSID)
		End If
		
		password = bc.StringFromBytes(GlobalStore.Slot1)
		If password.Length = 0 Then
			password = WiFiPassword
			GlobalStore.Put(1,password)
		End If
	
		WiFi.Connect2(SSID, password)

		If WiFi.IsConnected Then
			' Stop access point
			Log("Stopping access point")
			RunNative("SetSTA", Null)
			Log("Connected to WiFi = ",SSID," Local IP = ", WiFi.LocalIp, " Password = ",password)
			' Connect to CloudMQTT broker
			Dim ClientId As String = Rnd(0, 999999999) 'create a unique id
			MQTT.Initialize2(WiFiStr.stream, MQTTHostName, MQTTPort, ClientId, "MQTT_MessageArrived", "MQTT_Disconnected")
			MQTTOpt.Initialize(MQTTUser, MQTTPassword)
			MQTT_Connect(0)
		Else
			Log("Failed to connect to WiFi")
		End If
	
End Sub

Sub WriteToEEPROM(SSID As String, Password As String, OpenDelay As String, ClosedDelay As String, IsWiFi As String)
	eeprom.WriteBytes(Array As Byte(MAGIC_EEPROM, SSID.Length + 1 + Password.Length + 1 + OpenDelay.Length + 1 + ClosedDelay.Length + 1 + IsWiFi.Length), 0)
	Dim pos As Int = 2
	eeprom.WriteBytes(SSID, pos)
	pos = pos + SSID.Length
	eeprom.WriteBytes(Array As Byte(0), pos)
	pos = pos + 1
	eeprom.WriteBytes(Password, pos)
	pos = pos + Password.Length
	eeprom.WriteBytes(Array As Byte(0), pos)
	pos = pos + 1
	eeprom.WriteBytes(OpenDelay, pos)
	pos = pos + OpenDelay.Length
	eeprom.WriteBytes(Array As Byte(0), pos)
	pos = pos + 1
	eeprom.WriteBytes(ClosedDelay, pos)
	pos = pos + ClosedDelay.Length
	eeprom.WriteBytes(Array As Byte(0), pos)
	pos = pos + 1
	eeprom.WriteBytes(IsWiFi, pos)
End Sub

Sub ReadFromEEPROM
	Dim header() As Byte = eeprom.ReadBytes(0, 2)
	If header(0) = MAGIC_EEPROM Then
		Dim data() As Byte = eeprom.ReadBytes(2, header(1))
		Dim i As Int = bc.IndexOf(data, Array As Byte(0))
		If i = -1 Then
			Log("Error parsing settings. Starting as an access point.")
			WiFiServer.Start
			Return
		End If
		
		Dim SSID As String = bc.StringFromBytes(bc.SubString2(data, 0, i))
		Dim Password As String = bc.StringFromBytes(bc.SubString(data, i + 1))
		Dim OpenDelay As String = bc.StringFromBytes(bc.SubString(data, i + 2 + Password.Length))
		Dim ClosedDelay As String = bc.StringFromBytes(bc.SubString(data, i + 3 + OpenDelay.Length + Password.Length))
		Dim IsWifi As String = bc.StringFromBytes(bc.SubString(data, i + 4 + ClosedDelay.Length + OpenDelay.Length + Password.Length))

		GlobalStore.Put(0,SSID) ' SSID
		GlobalStore.Put(1,Password) ' Password
		GlobalStore.Put(2,OpenDelay) ' Open delay
		GlobalStore.Put(3,ClosedDelay) ' Closed delay
		GlobalStore.Put(4,IsWifi) ' Is used as WiFI 
		Log("ReadFromEEPROM "," Slot0: ",GlobalStore.Slot0," Slot1: ",GlobalStore.Slot1," Slot2: ",GlobalStore.Slot2," Slot3: ",GlobalStore.Slot3," Slot4: ", GlobalStore.Slot4)
	Else
		Log("Settings data not found. Starting as an access point.")
		WiFiServer.Start
	End If

End Sub

Sub ClearEEPROM
	Dim i As UInt
	
	Log("Size: ", eeprom.Size, " bytes")
	For i = 0 To eeprom.Size
		eeprom.WriteBytes(Array As Byte(0), i)
		Log(i)
	Next
End Sub

Public Sub SaveNetworkDetails(SSID As String, Password As String)
	Log("Saving settings: ", SSID, ", ", Password, ", " ,"56000",", ","60000" )
	SSID = bc.StringFromBytes(WiFiServer.ReplaceString(SSID, "%20", " "))
	WriteToEEPROM(SSID,Password,"56000","60000","True")
End Sub

Public Sub ConnectToNetwork
	WiFi.Disconnect
	' Read settings from EEPROM
	ReadFromEEPROM
	' Stop access point
	ConnectToWifi
End Sub

#if C
void SetSTA(B4R::Object* o) {
   WiFi.mode(WIFI_STA);
}
#end if
