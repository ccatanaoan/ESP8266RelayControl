Version=2.2
NumberOfModules=1
Module1=GlobalStore
Build1=Default,B4RDev
NumberOfFiles=0
NumberOfLibraries=6
Library1=rcore
Library2=resp8266
Library3=resp8266wifi
Library4=rmqtt
Library5=reeprom
Library6=rrandomaccessfile
@EndOfDesignText@

#Region Project Attributes
	#AutoFlushLogs: True
	#CheckArrayBounds: True
	#StackBufferSize: 600
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'Public variables can be accessed from all modules.
	Public Serial1 As Serial
	Private d1pins As D1Pins
	Private pin16 As Pin
	Private d6 As Pin
	Private WiFi As ESP8266WiFi
	Private WiFiStr As WiFiSocket
	Private MQTT As MqttClient
	Private MQTTOpt As MqttConnectOptions
	Private MQTTUser As String = "dbgdbcqw"
	Private MQTTPassword As String = "Nc3F4APoO801"
	Private MQTTHostName As String = "m14.cloudmqtt.com"
	Private MQTTPort As Int = 15093
	Private StopRelay As Boolean = False
	Private ESP As ESP8266
	Private WiFiSSID As String = "CloydNote8"
	Private WiFiPassword As String = "adjj6347"
	Private RelayOpenDelay As String = "5000"
	Private RelayClosedDelay As String = "15000"
	Private settings(4) As Byte
End Sub

Private Sub AppStart
	Serial1.Initialize(115200)
	Delay(3000)
	Log("AppStart")
	' Pin 2 is the blue LED
	' Pin 16 is the red LED
	' D6 = pin 12 is the logic/signal pin. Use 3.3v pin of Node MCU.
	
	pin16.Initialize(16, pin16.MODE_OUTPUT)
	d6.Initialize(d1pins.D6, d6.MODE_OUTPUT)
	
	' Connect to WiFi
	GlobalStore.Put(4,"1")
	ReadFromEEPROM
	ConnectToWifi

	' Connect to CloudMQTT broker
	Dim ClientId As String = Rnd(0, 999999999) 'create a unique id
	MQTT.Initialize2(WiFiStr.stream, MQTTHostName, MQTTPort, ClientId, "MQTT_MessageArrived", "MQTT_Disconnected")
	MQTTOpt.Initialize(MQTTUser, MQTTPassword)
	MQTT_Connect(0)
	
	' Infinite relay toggle
	RelayOpen(0)
End Sub

Sub MQTT_Connect(Unused As Byte)
	If WiFi.IsConnected = False Then
		ConnectToWifi
	End If
	If MQTT.Connect = False Then
		Log("Connecting to broker")
		MQTT.Connect2(MQTTOpt)
		CallSubPlus("MQTT_Connect", 1000, 0)
	Else
		pin16.DigitalWrite(False)
		Log("Connected to broker")
		MQTT.Subscribe("Andy", 0)
	End If
End Sub

Private Sub RelayClose (tag As Byte)
	If WiFi.IsConnected = False Then
		ConnectToWifi
	End If
	If StopRelay Then
		Return
	End If
	Log("*Relay has been closed")
	MQTT.Publish("Andy","*Relay has been closed")
	d6.DigitalWrite(True)
	Dim bc As ByteConverter
	Dim closedDelay As String = bc.StringFromBytes(GlobalStore.Slot3)
	If closedDelay.Length = 0 Then
		closedDelay = RelayClosedDelay
		GlobalStore.Put(3,RelayClosedDelay)
	End If
	Log("closedDelay: ",closedDelay)
	CallSubPlus("RelayOpen", closedDelay, 0)
End Sub

Private Sub RelayOpen (tag As Byte)
	If WiFi.IsConnected = False Then
		ConnectToWifi
	End If
	If StopRelay Then
		Return
	End If
	Log("*Relay has been opened")
	MQTT.Publish("Andy","*Relay has been opened")
	d6.DigitalWrite(False)
	Dim bc As ByteConverter
	Dim openDelay As String = bc.StringFromBytes(GlobalStore.Slot2)
	If openDelay.Length = 0  Then
		openDelay = RelayOpenDelay
		GlobalStore.Put(2,RelayOpenDelay)
	End If
	Log("openDelay: ",openDelay)
	CallSubPlus("RelayClose", openDelay, 0)
End Sub

Sub mqtt_MessageArrived (Topic As String, Payload() As Byte)
	pin16.DigitalWrite(False)
	Log("Message arrived. Topic=", Topic, " Payload=", Payload)
	If Payload="Remotely close relay" Then
		MQTT.Publish("Andy","*Closing relay by remote")
		d6.DigitalWrite(True)
		StopRelay = True
	Else If Payload="Remotely open relay" Then
		MQTT.Publish("Andy","*Opening relay by remote")
		StopRelay = False
		RelayOpen(0)
	Else If Payload = "Restart controller" Then
		MQTT.Publish("Andy","*Restarting relay by remote")
		ESP.Restart
	Else If Payload = "Check relay status" Then
		If StopRelay Then
			MQTT.Publish("Andy","*Relay is permanently closed")
		else If d6.DigitalRead Then
			MQTT.Publish("Andy","*Relay is closed")
		Else
			MQTT.Publish("Andy","*Relay is open")
		End If
	Else
		Dim bc As ByteConverter
		Dim c As Int = 0
		If bc.IndexOf(Payload,"|") > 0 Then
			For Each s() As Byte In bc.Split(Payload, "|")
					Dim b As Byte = bc.StringFromBytes(s)
					settings(c) = b
					If c = 0 Then
						GlobalStore.Put(0,s) ' SSID
						Log("GlobalStore.Slot0: ",GlobalStore.Slot0)
					End If
					If c = 1 Then
						GlobalStore.Put(1,s) ' Password
						Log("GlobalStore.Slot1: ",GlobalStore.Slot1)
					End If
					If c = 2 Then
						GlobalStore.Put(2,s) ' Open delay
						Log("GlobalStore.Slot2: ",GlobalStore.Slot2)
					End If
					If c = 3 Then
						GlobalStore.Put(3,s) ' Closed delay
						Log("GlobalStore.Slot3: ",GlobalStore.Slot3)
					End If
					c = c + 1
			Next
			Dim bc As ByteConverter
			WriteToEEPROM(bc.StringFromBytes(GlobalStore.Slot0),bc.StringFromBytes(GlobalStore.Slot1),bc.StringFromBytes(GlobalStore.Slot2),bc.StringFromBytes(GlobalStore.Slot3))
			ConnectToWifi
		End If
	End If
End Sub

Sub mqtt_Disconnected
	pin16.DigitalWrite(True)
	Log("Disconnected from broker")
	MQTT.Close
	If WiFi.IsConnected = False Then
		ConnectToWifi
	End If
	MQTT_Connect(0)
End Sub

Sub ConnectToWifi
	Dim bc As ByteConverter
	Dim SSID As String
	Dim password As String
	
	SSID = bc.StringFromBytes(GlobalStore.Slot0)
	If SSID.Length = 0 Then 
		SSID = WiFiSSID
		GlobalStore.Put(0,SSID)
	End If
	
	Log("SSID: ",SSID)
	password = bc.StringFromBytes(GlobalStore.Slot1)
	If password.Length = 0 Then
		password = WiFiPassword
		GlobalStore.Put(1,password)
	End If
	Log("Password: ",password)
	
	WiFi.Connect2(SSID, password)

	If WiFi.IsConnected Then
		Log("Connected to WiFi = ",SSID," Local IP = ", WiFi.LocalIp)
	Else
		Log("Not Connected to WiFi")
		Dim bc As ByteConverter
		Dim count As String = bc.StringFromBytes(GlobalStore.Slot4)
		count = NumberFormat(count,1,0)
		Log("WiFi connection attempts: ",count)
		If count > 3 Then
			Log("Temporarily reverting to CloydNote8 network")
			GlobalStore.Put(0,WiFiSSID) ' SSID
			Log("GlobalStore.Slot0: ",GlobalStore.Slot0)
		
			GlobalStore.Put(1,WiFiPassword) ' Password
			Log("GlobalStore.Slot1: ",GlobalStore.Slot1)
		
			GlobalStore.Put(2,RelayOpenDelay) ' Open delay
			Log("GlobalStore.Slot2: ",GlobalStore.Slot2)
		
			GlobalStore.Put(3,RelayClosedDelay) ' Closed delay
			Log("GlobalStore.Slot3: ",GlobalStore.Slot3)
		
			GlobalStore.Put(4,"1")
			'WriteToEEPROM(WiFiSSID,WiFiPassword,5000,15000)
		Else
			GlobalStore.Put(4,bc.StringToBytes(count + 1))
		End If
	End If
End Sub

Sub WriteToEEPROM(SSID As String, Password As String, OpenDelay As String, ClosedDelay As String)
	Dim bc As ByteConverter
	Dim ListOfObjectsToStore() As Object = Array(bc.StringToBytes(SSID), bc.StringToBytes(Password),bc.StringToBytes(OpenDelay), bc.StringToBytes(ClosedDelay))
	Dim ByteDataToStore() As Byte
	Dim bc As ByteConverter
	Dim serializator As B4RSerializator
	Dim eeprom As EEPROM

	' Convert the array of objects into a sequence of bytes.
	ByteDataToStore = serializator.ConvertArrayToBytes(ListOfObjectsToStore)
 
	Log("Writing settings into the EEPROM")
	
	' Store the length of the data being written into the EEPROM as an Integer taking up two bytes at Storage Location 700 in the EEPROM
	eeprom.WriteBytes(bc.IntsToBytes(Array As Int(ByteDataToStore.Length)), 700)
	
	' Now write out all the bytes into the EEPROM
	eeprom.WriteBytes(ByteDataToStore, 702)
End Sub

Sub ReadFromEEPROM
	Dim be(10) As Object 'used as a storage buffer for the serializator
	Dim bc As ByteConverter
	Dim serializator As B4RSerializator
	Dim eeprom As EEPROM

	Dim ByteLengthOfDataInEEPROM() As Byte
	Dim ActualLengthOfDataInEEPROM As Int
	Dim ByteDataInEEPROM() As Byte
	Dim ObjectsInEEPROM() As Object
	Log("Reading data from the EEPROM...")
	'Get two bytes out of the EEPROM from location 700
	ByteLengthOfDataInEEPROM = eeprom.ReadBytes(700, 2)
	'Convert these two bytes into an Integer - this is the number of bytes making up the objects that are stored in the EEPROM
	ActualLengthOfDataInEEPROM =  bc.IntsFromBytes(ByteLengthOfDataInEEPROM)(0)
	Log("ActualLengthOfDataInEEPROM: ",ActualLengthOfDataInEEPROM)
	If ActualLengthOfDataInEEPROM = 0 Then
		WriteToEEPROM(WiFiSSID,WiFiPassword,5000,15000)
		'Get two bytes out of the EEPROM from location 700
		ByteLengthOfDataInEEPROM = eeprom.ReadBytes(700, 2)
		'Convert these two bytes into an Integer - this is the number of bytes making up the objects that are stored in the EEPROM
		ActualLengthOfDataInEEPROM =  bc.IntsFromBytes(ByteLengthOfDataInEEPROM)(0)
	End If
     
	'Get all that byte data out of the EEPROM
	ByteDataInEEPROM = eeprom.ReadBytes(702, ActualLengthOfDataInEEPROM)

	'Convert those bytes back into an array of objects
	ObjectsInEEPROM = serializator.ConvertBytesToArray(ByteDataInEEPROM, be)

	' Now list all the objects
	'	For Each o As Object In ObjectsInEEPROM
	'		Log(o)
	'	Next
		Dim bc As ByteConverter
	If ObjectsInEEPROM(0) <> 0 Then
		GlobalStore.Put(0,bc.StringFromBytes(ObjectsInEEPROM(0))) ' SSID
		Log("GlobalStore.Slot0: ",GlobalStore.Slot0)
		
		GlobalStore.Put(1,bc.StringFromBytes(ObjectsInEEPROM(1))) ' Password
		Log("GlobalStore.Slot1: ",GlobalStore.Slot1)
		
		GlobalStore.Put(2,bc.StringFromBytes(ObjectsInEEPROM(2))) ' Open delay
		Log("GlobalStore.Slot2: ",GlobalStore.Slot2)
		
		GlobalStore.Put(3,bc.StringFromBytes(ObjectsInEEPROM(3))) ' Closed delay
		Log("GlobalStore.Slot3: ",GlobalStore.Slot3)
	Else
		GlobalStore.Put(0,WiFiSSID) ' SSID
		Log("GlobalStore.Slot0: ",GlobalStore.Slot0)
		
		GlobalStore.Put(1,WiFiPassword) ' Password
		Log("GlobalStore.Slot1: ",GlobalStore.Slot1)
		
		GlobalStore.Put(2,RelayOpenDelay) ' Open delay
		Log("GlobalStore.Slot2: ",GlobalStore.Slot2)
		
		GlobalStore.Put(3,RelayClosedDelay) ' Closed delay
		Log("GlobalStore.Slot3: ",GlobalStore.Slot3)
		
		WriteToEEPROM(WiFiSSID,WiFiPassword,5000,15000)
	End If

End Sub

Sub ClearEEPROM
	Dim eeprom As EEPROM
	Dim i As UInt
	
	Log("Size: ", eeprom.Size, " bytes")
	For i = 0 To eeprom.Size
		eeprom.WriteBytes(Array As Byte(0), i)
		Log(i)
	Next
End Sub
